pipeline {
    agent any
    
    tools {
        jdk 'jdk17'
        maven 'maven3'
    }
    
    environment {
        SCANER_HOME = tool 'sonar-scanner'
        EMAIL_RECIPIENT = 'contactmaruthimr@gmail.com'  // Replace with your recipient email address
    }

    stages {
        stage('Git-Checkout') {
            steps {
                git branch: 'main', credentialsId: 'git-cred', url: 'https://github.com/MaruthiMR/ultimatecicd.git'
            }
        }
        
        stage('Compile') {
            steps {
                sh "mvn compile"
            }
        }
        
        stage('Test') {
            steps {
                sh "mvn test"
            }
        }
        
        stage('File-System Scan') {
            steps {
                sh "trivy fs --format table -o trivy-fs-report.html ."
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh "${SCANER_HOME}/bin/sonar-scanner \
                       -Dsonar.projectName=DevOpsPlayground-project \
                       -Dsonar.projectKey=DevOpsPlayground-project \
                       -Dsonar.java.binaries=."
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialId: 'sonar-cred'
                }
            }
        }
        
        stage('Build') {
            steps {
                sh "mvn clean install"
            }
        }
        stage('Build & Tag Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh 'docker build -t maruthimrmbr/boardgame:latest .'
                    }
                }
            }
        }
        
        stage('Docker Image Scan') {
            steps {
                sh "trivy image --format table -o trivy-image-report.html maruthimrmbr/boardgame:latest"
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh "docker push maruthimrmbr/boardgame:latest"
                    }
                }
            }
        }
        
        stage('Deploy to Kubernetes Cluster') {
            steps {
                withKubeConfig(
                    credentialsId: 'k8s-cred',
                    serverUrl: 'https://172.31.46.239:6443',
                    namespace: 'webapps',
                    caCertificate: '',
                    clusterName: 'kubernetes',
                    contextName: '',
                    restrictKubeConfigAccess: false
                ) {
                    sh "kubectl apply -f deployment-service.yaml"
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                withKubeConfig(
                    credentialsId: 'k8s-cred',
                    serverUrl: 'https://172.31.46.239:6443',
                    namespace: 'webapps',
                    caCertificate: '',
                    clusterName: 'kubernetes',
                    contextName: '',
                    restrictKubeConfigAccess: false
                ) {
                    sh "kubectl get pods -n webapps"
                    sh "kubectl get svc -n webapps"
                }
            }
        }
        
        stage('Send Email Notification') {
            steps {
                emailext body: 'Your deployment to Kubernetes is complete.',
                         subject: 'Kubernetes Deployment',
                         to: env.EMAIL_RECIPIENT
            }
        }
    }
}
